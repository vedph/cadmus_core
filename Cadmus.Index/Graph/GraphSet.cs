using System;
using System.Collections.Generic;
using System.Linq;

namespace Cadmus.Index.Graph
{
    /// <summary>
    /// A set of graph nodes and triples.
    /// </summary>
    public class GraphSet
    {
        /// <summary>
        /// Gets the nodes generated in the current mapping session.
        /// </summary>
        public IList<NodeResult> Nodes { get; }

        /// <summary>
        /// Gets the triples generated in the current mapping session.
        /// </summary>
        public IList<Triple> Triples { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GraphSet"/> class.
        /// </summary>
        public GraphSet()
        {
            Nodes = new List<NodeResult>();
            Triples = new List<Triple>();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GraphSet"/> class.
        /// </summary>
        /// <param name="nodes">The nodes.</param>
        /// <param name="triples">The triples.</param>
        /// <exception cref="ArgumentNullException">nodes or triples</exception>
        public GraphSet(IList<NodeResult> nodes, IList<Triple> triples)
        {
            Nodes = nodes ?? throw new ArgumentNullException(nameof(nodes));
            Triples = triples ?? throw new ArgumentNullException(nameof(triples));
        }

        /// <summary>
        /// Gets the source item/part GUID for this set, assuming that all
        /// the nodes/triples in it have the same GUID unless their SID is null.
        /// In fact, this assumption is expected as nodes and triples get
        /// generated by mappers whenever an item or a part is saved, so all of
        /// them will share the GUID portion of their SID, except for those
        /// nodes having no SID at all (=non-literal O nodes of triples).
        /// </summary>
        /// <returns>Null is set is empty, else a tuple where 1=GUID and 2=true
        /// if source is an item, false if it is a part.</returns>
        public Tuple<string, bool> GetSourceGuidAndType()
        {
            Node node = Nodes.FirstOrDefault(n =>
                n.SourceType != NodeSourceType.User
                && !string.IsNullOrEmpty(n.Sid));

            if (node == null) return null;

            string sid = node.Sid.Substring(0, 36);
            return Tuple.Create(sid, node.SourceType != NodeSourceType.Pin);
        }

        /// <summary>
        /// Converts to string.
        /// </summary>
        /// <returns>
        /// A <see cref="string" /> that represents this instance.
        /// </returns>
        public override string ToString()
        {
            return $"N: {Nodes.Count} | T: {Triples.Count}";
        }
    }
}
